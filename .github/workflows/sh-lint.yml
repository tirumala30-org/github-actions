name: Reusable workflow

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      workflow_id:
         required: true
         type: string
         description: "ID or filename of the workflow to get latest successful commit"
      files_to_match:
         description: "Check for changes using only this list of files or regex (Defaults to the entire repo)"
         required: true
         type: string   
    secrets:
      gh_token:
         required:  true

jobs:
  changed_sh_files_job:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
          
    - name: Fetch branch
      if: ${{ github.base_ref }}
      shell: bash
      run: |
           git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
           echo "${{ github.base_ref }}"
    - name: Get last successful commit on base branch
      uses: nrwl/last-successful-commit-action@v1
      id: last_successful_commit
      with:
        branch: ${{ github.base_ref || github.ref_name }}
        workflow_id: ${{ inputs.workflow_id }}
        github_token: ${{ secrets.gh_token }}

    - name: Get last common ancestor commit with base branch
      id: common_ancestor_commit
      if: ${{ github.base_ref }}
      shell: bash
      run: echo "::set-output name=commit_sha::$(git merge-base ${LAST_SUCCESSFUL_COMMIT:-origin/$GITHUB_BASE_BRANCH} $GITHUB_SHA)"
      env:
        LAST_SUCCESSFUL_COMMIT: ${{ steps.last_successful_commit.outputs.commit_hash }}
        GITHUB_BASE_BRANCH: ${{ github.base_ref }}

    - name: Get changed files
      uses: tj-actions/changed-files@v12
      id: changed-files
      with:
        base_sha: ${{ steps.common_ancestor_commit.outputs.commit_sha || steps.last_successful_commit.outputs.commit_hash }}
        files: ${{ inputs.files_to_match }}

   
  shlint_job:
    runs-on: ubuntu-latest
    needs: changed_sh_files_job
    if: needs.changed_sh_files_job.outputs.any_changed == 'true'
    steps:
      - uses: actions/checkout@v2

      - name: shellcheck Github Action
        run: |
           sudo apt install shellcheck -y
           exit_code=0
           for file in ${{ needs.changed_sh_files_job.outputs.changed_files }}; do
                shellcheck $file || exit_code=1
           done
           exit $exit_code
